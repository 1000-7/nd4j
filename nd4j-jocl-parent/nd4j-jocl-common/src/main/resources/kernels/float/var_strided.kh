#include "reduce.h"


__global  float merge(float f1,float f2,global float *extraParams) {
   return f1 + f2;
}

__global  float update(float old,float opOutput,global float *extraParams) {
       float mean = extraParams[2];
       float curr = pow(opOutput - mean,2.0);
       return old + curr;
 }


//an op for the kernel
__global  float op(float d1,global float *extraParams) {
      return d1;

}

//post process result (for things like means etc)
__global  float postProcess(float reduction,int n,int xOffset,global float *dx,int incx,global float *extraParams,global float *result) {
             float bias = extraParams[1];
            return  (reduction - (powf(bias,2.0) / n)) / (float) (n - 1.0);

}


__kernel void var_strided_float(int n, int xOffset,global float *dx,int incx,global float *extraParams,global float *result) {
              transform(n,xOffset,dx,incx,extraParams,result);

 }


